server.port=8089



############ freemarker静态资源配置 ############
#关闭缓存
spring.freemarker.cache=false
spring.freemarker.charset=UTF-8
spring.freemarker.check-template-location=true
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=true
spring.freemarker.expose-session-attributes=true
spring.freemarker.request-context-attribute=request
# 资源文件以.ftl结尾
spring.freemarker.suffix=.ftl
#存储位置
spring.freemarker.tempalte-loader-path=classpath:/templates


############ 日志 ############
#TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF【log.info();】
#root日志以warn级别输出（默认是info）,那么只能打印warn,error,fatal,off【也就是说只能打印级别大于等于当前级别的】
#spring框架集合日志都是debug，方便让你程序能够清晰的到框架运行的原理
#root根日志以debug的级别输出
logging.level.root=debug
#spring日志以info级别输出,只会打印info以及以上级别的日志
logging.level.org.springframework.web=info
#Hibernate日志以ERROR日志进行输出
logging.level.org.hibernate=error
#com.syf.study包日志以info日志级别输出
logging.level.com.syf.study=info
#如果上方不配，则都会用默认配置
#LOG_LEVEL_LOGGERS = new LinkedMultiValueMap<>();
#LOG_LEVEL_LOGGERS.add(LogLevel.DEBUG, "org.springframework.boot");
#LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.springframework");
#LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.apache.tomcat");
#LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.apache.catalina");
#LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.eclipse.jetty");
#LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.hibernate.tool.hbm2ddl");
#LOG_LEVEL_LOGGERS.add(LogLevel.DEBUG, "org.hibernate.SQL");
#logging.file可以设置将日志同步到指定文件中
#logging.file=logs/all.log
#logging.path可以设置将日志在指定文件夹下自动生成一个spring.log文件
#不能和logging.file同时使用
logging.path= mylog/log/

